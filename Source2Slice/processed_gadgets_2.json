[
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst file = fs.readFileSync(path.join(__dirname, 'file.txt'), 'utf8');\nconsole.log(file);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'file.txt')",
        "line_number": 3
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); fs.readFile(path.join(__dirname, '../..', 'config.txt'), (err, data) => { if (err) { console.error(err); } else { console.log(data.toString()); } });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../..', 'config.txt')",
        "line_number": 1
      }
    ]
  },
  {
    "code": "var fs = require('fs');\nvar filePath = fs.readFileSync('path/to/file.txt', 'utf8');\nvar newFilePath = filePath + '/etc/passwd';\nfs.writeFileSync(newFilePath, 'Traversed File Path');",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const express = require('express');\nconst app = express();\napp.get('/file/:filePath', (req, res) => {\n  const filePath = req.params.filePath;\n  const newFilePath = filePath + '/etc/passwd';\n  res.sendFile(newFilePath);\n});\napp.listen(3000);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const childProcess = require('child_process');\nconst filePath = 'path/to/file.txt';\nconst newFilePath = filePath + '/etc/passwd';\nchildProcess.execSync(`cat ${newFilePath}`);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const axios = require('axios');\nconst filePath = 'path/to/file.txt';\nconst newFilePath = filePath + '/etc/passwd';\naxios.get(`file:",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst filePath = fs.readFileSync('path/to/file.txt', 'utf8');\nconst newFilePath = filePath + '/etc/passwd';\nfs.chmodSync(newFilePath, 0o777);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst filePath = '/etc/passwd';\nfs.readFileSync(path.join(__dirname, filePath));",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readConfig() {\n  const config = require(\"./config.json\");\n  const path = require('path');\n  const filePath = path.join(__dirname, '../', config.file); \n  const fs = require('fs');\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  return fileContent;\n}",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../', config.file)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "function readFile(path) {\n  const fs = require('fs');\n  return fs.readFileSync(path, 'utf8');\n}\n\n\nconst filePath = '../path/to/file.txt';\nconst fileContent = readFile(filePath);\nconsole.log(fileContent);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const express = require('express');\nconst app = express();\n\napp.get('/read/:filePath', (req, res) => {\n  const filePath = req.params.filePath;\n  const fs = require('fs');\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  res.send(fileContent);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const childProcess = require('child_process');\nconst process = childProcess.spawnSync('cat', [ '../path/to/file.txt' ]);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst filePath = __dirname + '/../path/to/file.txt';\nconst fileContent = fs.readFileSync(filePath, 'utf8');\nconsole.log(fileContent);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const path = require('path');\nconst filePath = path.join(__dirname, '../path/to/file.txt');\nconst fs = require('fs');\nconst fileContent = fs.readFileSync(filePath, 'utf8');\nconsole.log(fileContent);",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../path/to/file.txt')",
        "line_number": 2
      }
    ]
  },
  {
    "code": "const http = require('http');\nconst url = require('url');\nconst querystring = require('querystring');\n\nhttp.createServer((req, res) => {\n  const { pathname, query } = url.parse(req.url);\n  const params = querystring.parse(query);\n  const file = params.file;\n  const fs = require('fs');\n  const filePath = `./uploads/${file}`;\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      res.writeHead(404, {'Content-Type': 'text/plain'});\n      res.end('File not found');\n    } else {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end(data);\n    }\n  });\n}).listen(3000, () => {\n  console.log('Server running at http:\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readConfig(file){\n  const fs = require('fs');\n  const filePath = file + \"/config.json\";\n  const config = JSON.parse(fs.readFileSync(filePath, 'utf8'));\n  return config;\n}\n\n\nconst config = readConfig(\"/etc/myapp\");\nconsole.log(config);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readConfig(file) {\n    try {\n        const filePath = path.join(__dirname, file);\n        const contents = fs.readFileSync(filePath, 'utf8');\n        const config = JSON.parse(contents);\n        return config;\n    } catch (err) {\n        console.error(`Error reading config file: ${err}`);\n        return null;\n    }\n}\n\nconst config = readConfig('config.json');\n\nif (config) {\n    console.log(config);\n} else {\n    console.log('Failed to read config file.');\n}\n\n\nconst filePath = path.join(__dirname, 'data.json');\nconst contents = fs.readFileSync(filePath, 'utf8');\nconst data = JSON.parse(contents);\nconsole.log(data);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, file)",
        "line_number": 6
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'data.json')",
        "line_number": 25
      }
    ]
  },
  {
    "code": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.get('/config', (req, res) => {\n    const configFilePath = req.query.file;\n    const filePath = path.join(__dirname, configFilePath);\n    const contents = fs.readFileSync(filePath, 'utf8');\n    res.send(contents);\n});\n\napp.listen(3000, () => {\n    console.log('Server listening on port 3000');\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, configFilePath)",
        "line_number": 8
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readConfig(file) {\n    try {\n        const filePath = path.join(__dirname, file);\n        const contents = fs.readFileSync(filePath, 'utf8');\n        const config = JSON.parse(contents);\n        return config;\n    } catch (err) {\n        console.error(`Error reading config file: ${err}`);\n        return null;\n    }\n}\n\nconst config = readConfig('config.json');\n\nif (config) {\n    console.log(config);\n} else {\n    console.log('Failed to read config file.');\n}",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, file)",
        "line_number": 6
      }
    ]
  },
  {
    "code": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.get('/config', (req, res) => {\n    const configFilePath = req.query.file;\n    const filePath = path.join(__dirname, configFilePath);\n    const contents = fs.readFileSync(filePath, 'utf8');\n    res.send(contents);\n});\n\napp.listen(3000, () => {\n    console.log('Server listening on port 3000');\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, configFilePath)",
        "line_number": 8
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readConfig(file) {\n    try {\n        const filePath = path.join(__dirname, file);\n        const contents = fs.readFileSync(filePath, 'utf8');\n        const config = JSON.parse(contents);\n        return config;\n    } catch (err) {\n        console.error(`Error reading config file: ${err}`);\n        return null;\n    }\n}\n\nconst config = readConfig('config.json');\n\nif (config) {\n    console.log(config);\n} else {\n    console.log('Failed to read config file.');\n}\n\n\nconst filePath = path.join(__dirname, 'data.json');\nconst contents = fs.readFileSync(filePath, 'utf8');\nconst data = JSON.parse(contents);\nconsole.log(data);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, file)",
        "line_number": 6
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'data.json')",
        "line_number": 25
      }
    ]
  },
  {
    "code": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.get('/config', (req, res) => {\n    const configFilePath = req.query.file;\n    const filePath = path.join(__dirname, configFilePath);\n    const contents = fs.readFileSync(filePath, 'utf8');\n    res.send(contents);\n});\n\napp.listen(3000, () => {\n    console.log('Server listening on port 3000');\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, configFilePath)",
        "line_number": 8
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readConfig(file) {\n    try {\n        const filePath = path.join(__dirname, file);\n        const contents = fs.readFileSync(filePath, 'utf8');\n        const config = JSON.parse(contents);\n        return config;\n    } catch (err) {\n        console.error(`Error reading config file: ${err}`);\n        return null;\n    }\n}\n\nconst config = readConfig('config.json');\n\nif (config) {\n    console.log(config);\n} else {\n    console.log('Failed to read config file.');\n}\n\n\nconst filePath = path.join(__dirname, 'data.json');\nconst contents = fs.readFileSync(filePath, 'utf8');\nconst data = JSON.parse(contents);\nconsole.log(data);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, file)",
        "line_number": 6
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'data.json')",
        "line_number": 25
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\ntry {\n  const filePath = '/etc/passwd' + '..\n  const content = fs.readFileSync(filePath, 'utf8');\n  console.log(content);\n} catch (err) {\n  console.error(err);\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function readConfig(file) {\n  var fs = require('fs');\n  var data = fs.readFileSync(file, 'utf8');\n  return JSON.parse(data);\n}",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var file = require('fs');\nvar path = require('path');\nvar filePath = '/etc/passwd';\nfile.readFile(path.join(__dirname, filePath), (err, data) => {\n    if (err) return console.error(err);\n    console.log(data);\n});\n\n\nvar filePath = '/etc/shadow';\nfile.readFile(path.join(__dirname, filePath), (err, data) => {\n    if (err) return console.error(err);\n    console.log(data);\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 4
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 11
      }
    ]
  },
  {
    "code": "function readFile(path) {\n  return require('fs').readFileSync(path, 'utf8');\n}\n\nconst fileContent = readFile('/etc/passwd');\nconsole.log(fileContent);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const path = require('path');\nconst fs = require('fs');\n\nconst vulnerableFunction = (filePath) => {\n  const fileContents = fs.readFileSync(path.join(__dirname, filePath));\n  return fileContents.toString();\n};\n\nconst filePath = '../etc/passwd';\nvulnerableFunction(filePath);",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "const path = require('path');\nconst file = path.join(__dirname, '../config/secret.txt');\nfs.readFile(file, (err, data) => {\n  if (err) return console.error(err);\n  console.log(data.toString());\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../config/secret.txt')",
        "line_number": 2
      }
    ]
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function readConfig(file) {\n  var fs = require('fs');\n  return fs.readFileSync(file, 'utf8');\n}\n\nvar configFile = readConfig('config.txt');",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readFile(filePath) {\n  const fs = require('fs');\n  return fs.readFileSync(filePath, 'utf8');\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\n\nconst file = fs.readFileSync(path.join(__dirname, 'input.txt'), 'utf8');\n\n\nconst userInput = 'file:\nconst filePath = path.join(__dirname, userInput);\n\nfs.writeFileSync(filePath, 'Hello World!');\n\nconsole.log(file);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'input.txt')",
        "line_number": 5
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 9
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nlet filePath = fs.readFileSync('file.txt', 'utf8');\nlet newPath = path.join(__dirname, '..', filePath);\nfs.writeFileSync(newPath, 'Sensitive Data');",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "function readConfig() {\n  var configFile = \"/etc/config.json\";\n  var config = require(configFile);\n  return config;\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function readConfigFile(filePath){\n  const fs = require('fs');\n  return fs.readFileSync(filePath, 'utf8');\n}\n\n\nconst configFile = readConfigFile('/etc/config.txt');\nconsole.log(configFile);\n\n\nconst vulnerableCode = readConfigFile('/etc/../etc/passwd');\nconsole.log(vulnerableCode);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "import { createReadStream } from 'fs';\\n\\nfunction readConfigFile() {\\n  const filePath = '../config.json';\\n  const readStream = createReadStream(filePath);\\n  return readStream;\\n}\\n\\n",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\\n\\nfunction readUserFile(username) {\\n  const filePath = `/home/${username}/.ssh/id_rsa`;\\n  return fs.readFileSync(filePath, 'utf8');\\n}\\n\\n",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "import { createReadStream } from 'fs';\\n\\nfunction readDatabaseConfig() {\\n  const filePath = '../database/config.json';\\n  const readStream = createReadStream(filePath);\\n  return readStream;\\n}\\n\\n",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\\n\\nfunction readProjectFile(projectName) {\\n  const filePath = `/projects/${projectName}/README.md`;\\n  return fs.readFileSync(filePath, 'utf8');\\n}\\n\\n",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst file = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconsole.log(file);\n\n\nconst file2 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconst file3 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconsole.log(file2 + file3);\n\n\nconst file4 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconst file5 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconst file6 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconst file7 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconsole.log(file4 + file5 + file + file7);\n\n\nconst file8 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconst file9 = fs.readFileSync(path.join(__dirname, '../flag.txt'), 'utf8');\nconsole.log(file8 + file9);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 3
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 7
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 8
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 12
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 13
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 14
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 15
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 19
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../flag.txt')",
        "line_number": 20
      }
    ]
  },
  {
    "code": "function readConfig(file) {\n    var fs = require('fs');\n    return fs.readFileSync(file, 'utf8');\n}\n\nvar configFile = readConfig('/etc/config.txt');",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\n\nfunction readFile(filePath) {\n  return fs.readFileSync(path.join(__dirname, filePath));\n}\n\n\nconst userInput = '../etc/passwd';\nconst fileContents = readFile(userInput);\nconsole.log(fileContents.toString());",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 6
      }
    ]
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const path = require('path');\nconst fs = require('fs');\nconst file = fs.readFileSync(path.join(__dirname, '../input.txt'), 'utf8');\nconsole.log(file);\n\nconst gadget = { version: '1.0', author: 'John Doe' };\nfs.writeFileSync(path.join(__dirname, '../output.txt'), JSON.stringify(gadget));",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../input.txt')",
        "line_number": 3
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '../output.txt')",
        "line_number": 7
      }
    ]
  },
  {
    "code": "function traverseFilesystem(path) { var fs = require('fs'); var directory = fs.readdirSync(path); console.log(directory); }",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst file = fs.readFileSync(path.join(__dirname, '../uploads/' + req.params.file));",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal_with_user_input",
        "source": "path.join(__dirname, '../uploads/' + req.params.file)",
        "line_number": 3
      }
    ]
  },
  {
    "code": "var path = require('path');\nvar fs = require('fs');\nvar filePath = __dirname + '/../../../../etc/passwd';\nfs.readFile(filePath, 'utf8', function (err, data) { console.log(data); });",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst traverse = (directory) => {\n  fs.readdirSync(directory).forEach((file) => {\n    const filePath = path.join(directory, file);\n    if (fs.lstatSync(filePath).isDirectory()) {\n      traverse(filePath);\n    } else {\n      console.log(filePath);\n    }\n  });\n};\ntraverse('/');",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(directory, file)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "function readConfig() {\n  var path = '/etc/config.json';\n  var fs = require('fs');\n  return fs.readFileSync(path, 'utf8');\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nlet filePath = '/etc/passwd' + '\\..\\..\\etc\\passwd';\nfs.readFile(path.join(filePath), (err, data) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(data.toString());\n  }\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const path = require('path');\nconst fs = require('fs');\nconst file = fs.readFileSync(path.join(__dirname, '..', 'input.txt'), 'utf8');\nconsole.log(file);",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', 'input.txt')",
        "line_number": 3
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nlet filePath = '\\\\path\\\\to\\\\file.txt';\nlet fileContent = fs.readFileSync(path.join(__dirname, filePath));\nconsole.log(fileContent.toString());",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\n\nconst file = fs.readFileSync(path.join(__dirname, '..'), 'utf8');\n\n\nconst userInput = '/etc/passwd';\n\n\nconst filePath = path.join(__dirname, userInput);\nconst fileContent = fs.readFileSync(filePath, 'utf8');\nconsole.log(fileContent);",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..')",
        "line_number": 5
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 11
      }
    ]
  },
  {
    "code": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\n\napp.get('/', (req, res) => {\n  const userInput = req.query.file;\n  const filePath = path.join(__dirname, userInput);\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  res.send(fileContent);\n});\n\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 10
      }
    ]
  },
  {
    "code": "const childProcess = require('child_process');\nconst path = require('path');\n\nconst userInput = process.argv[2];\nconst filePath = path.join(__dirname, userInput);\nconst fileContent = childProcess.execFileSync('cat', [filePath]);\nconsole.log(fileContent.toString());",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "const { spawn } = require('child_process');\nconst path = require('path');\n\nconst userInput = process.argv[2];\nconst filePath = path.join(__dirname, userInput);\nconst process = spawn('cat', [filePath]);\nprocess.stdout.on('data', (data) => {\n  console.log(data.toString());\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "const { createReadStream } = require('fs');\nconst path = require('path');\n\nconst userInput = process.argv[2];\nconst filePath = path.join(__dirname, userInput);\nconst stream = createReadStream(filePath);\nstream.pipe(process.stdout);",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userInput)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "const http = require('http');\nconst url = require('url');\n\nhttp.createServer((req, res) => {\n  const parsedUrl = url.parse(req.url, true);\n  const path = parsedUrl.pathname;\n  if (path.includes('..')) {\n    console.log('Path traversal detected');\n  } else {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Hello World\n');\n  }\n}).listen(3000, () => {\n  console.log('Server running at http:\n});",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "import requests\nfrom urllib.parse import urlparse\n\ndef get_data(url):\n    try:\n        parsed_url = urlparse(url)\n        if '..' in parsed_url.path:\n            print('Path traversal detected')\n        else:\n            response = requests.get(url)\n            return response.json()\n    except Exception as e:\n        print(f'Error: {e}')\n\nurl = 'http:\nget_data(url)",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "public class PathTraversal {\n    public static void main(String[] args) {\n        String filePath = \"/home/user/../etc/passwd\";\n        File file = new File(filePath);\n        if (file.exists()) {\n            System.out.println(\"File exists: \" + file.getAbsolutePath());\n        } else {\n            System.out.println(\"File does not exist\");\n        }\n    }\n}",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string filePath = \"/home/user/../etc/passwd\";\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::cout << \"File exists: \" << filePath << std::endl;\n    } else {\n        std::cout << \"File does not exist\" << std::endl;\n    }\n    return 0;\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "using System;\nusing System.IO;\n\nclass Program {\n    static void Main(string[] args) {\n        string filePath = \"/home/user/../etc/passwd\";\n        if (File.Exists(filePath)) {\n            Console.WriteLine(\"File exists: \" + filePath);\n        } else {\n            Console.WriteLine(\"File does not exist\");\n        }\n    }\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function readFile(path) {\n  const fs = require('fs');\n  return fs.readFileSync(path, 'utf8');\n}",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst filePath = './data/' + req.query.filename;\nfs.readFile(path.join(filePath), (err, data) => {\n    if (err) {\n        console.error(err);\n    } else {\n        res.send(data);\n    }\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "var filePath = req.query.file + \".txt\";\nfs.readFile(filePath, function(err, data) {\n    if (err) {\n        res.status(500).send(err);\n    } else {\n        res.send(data);\n    }\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readConfig() {\n  var path = require('path');\n  var configFile = path.join(__dirname, 'config.json');\n  var config = require(configFile);\n  return config;\n}",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'config.json')",
        "line_number": 3
      }
    ]
  },
  {
    "code": "function readConfig(file) {\n    const fs = require('fs');\n    const config = fs.readFileSync(file, 'utf8');\n    return JSON.parse(config);\n}\n\n\nconst config = readConfig('config.json');\nconsole.log(config);\n\n\nfunction readConfig(file) {\n    const fs = require('fs');\n    const config = fs.readFileSync(file, 'utf8');\n    return JSON.parse(config);\n}\n\n\nconst config = readConfig('./../../etc/config.json');\nconsole.log(config);\n\n\nfunction readConfig(file) {\n    const fs = require('fs');\n    const config = fs.readFileSync(file, 'utf8');\n    return JSON.parse(config);\n}\n\n\nconst config = readConfig('../etc/config.json');\nconsole.log(config);\n\n\nfunction readConfig(file) {\n    const fs = require('fs');\n    const config = fs.readFileSync(file, 'utf8');\n    return JSON.parse(config);\n}\n\n\nconst config = readConfig('./../../../etc/config.json');\nconsole.log(config);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst fileName = '../etc/passwd';\nfs.readFile(path.join(__dirname, fileName), 'utf8', (err, data) => {\n  console.log(data);\n});",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "const fs = require('fs');\nconst file = fs.readFileSync('path/../etc/passwd','utf8');\nconsole.log(file);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\n\n\nconst file = fs.readFileSync(path.join(__dirname, '..', 'uploads', 'file.txt'));",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', 'uploads', 'file.txt')",
        "line_number": 5
      }
    ]
  },
  {
    "code": "function readFile(filePath){\n  const fs = require('fs');\n  return fs.readFileSync(filePath, 'utf8');\n}\n\n\nconst filePath = '../etc/passwd';\nconsole.log(readFile(filePath));",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readFile(filePath){\n  const fs = require('fs');\n  return fs.readFileSync(filePath, 'utf8');\n}\n\n\nconst filePath = '/etc/shadow';\nconsole.log(readFile(filePath));",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function writeFile(filePath, content){\n  const fs = require('fs');\n  fs.writeFileSync(filePath, content);\n}\n\n\nconst filePath = '../etc/passwd';\nwriteFile(filePath, 'alicious content');",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function readConfigFile(filePath){\n  const fs = require('fs');\n  return fs.readFileSync(filePath, 'utf8');\n}\n\n\nconst filePath = '../config/config.json';\nconsole.log(readConfigFile(filePath));",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function deleteFile(filePath){\n  const fs = require('fs');\n  fs.unlinkSync(filePath);\n}\n\n\nconst filePath = '/etc/shadow';\ndeleteFile(filePath);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function read_file(filename){\n  const fs = require('fs');\n  return fs.readFileSync(filename, 'utf8');\n}\n\nconsole.log(read_file('../etc/passwd'));",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nvar file = fs.readFileSync('/etc/passwd', 'utf8');\nconsole.log(file);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function readFile(filePath) {\n    const fs = require('fs');\n    return fs.readFileSync(filePath, 'utf8');\n}\n\n\nconst filePath = '../uploads/' + req.params.file;\nreadFile(filePath);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const path = require('path');\nconst fs = require('fs');\nconst file_path = '../'+path.join('uploads','user_input.txt');\nfs.readFile(file_path, 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join('uploads','user_input.txt')",
        "line_number": 3
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const file = fs.readFileSync(path.join(__dirname, '..\\\\..\\\\test.txt'));",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..\\\\..\\\\test.txt')",
        "line_number": 1
      }
    ]
  },
  {
    "code": "function readFile(path) {\n    return require('fs').readFileSync(path, 'utf8');\n}\n\n\nconst filePath = '../secret/data.txt';\nconst contents = readFile(filePath);\nconsole.log(contents);\n\n\nconst filePath = '../' + req.body.path + '/data.txt';\nconst contents = readFile(filePath);\nconsole.log(contents);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst path = require('path');\nconst filename = '../etc/passwd';\nfs.access(path.join(process.cwd(), filename), fs.constants.R_OK, (err) => {\n  if (err) {\n    console.log('Access denied');\n  } else {\n    console.log('Access granted');\n  }\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(process.cwd()",
        "line_number": 4
      }
    ]
  },
  {
    "code": "var file = require('fs');\nvar path = '/etc/passwd';\nfile.readFile(path, function(err, data) {\n    console.log(data);\n});\n\n\nvar file = require('fs');\nvar path = process.argv[2];\nfile.readFile(path, function(err, data) {\n    console.log(data);\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var http = require('http');\nvar path = '/etc/shadow';\nvar options = {\n  host: 'localhost',\n  port: 80,\n  path: path\n};\nvar req = http.request(options, function(res) {\n  res.on('data', function(data) {\n    console.log(data);\n  });\n});\nreq.end();\n\n\nvar http = require('http');\nvar path = process.argv[2];\nvar options = {\n  host: 'localhost',\n  port: 80,\n  path: path\n};\nvar req = http.request(options, function(res) {\n  res.on('data', function(data) {\n    console.log(data);\n  });\n});\nreq.end();",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var fs = require('fs');\nvar path = '\\\\..\\\\etc\\\\passwd';\nfs.readFile(path, function(err, data) {\n    console.log(data);\n});\n\n\nvar fs = require('fs');\nvar path = process.argv[2];\nfs.readFile(path, function(err, data) {\n    console.log(data);\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var http = require('http');\nvar path = '\\\\..\\\\etc\\\\shadow';\nvar options = {\n  host: 'localhost',\n  port: 80,\n  path: path\n};\nvar req = http.request(options, function(res) {\n  res.on('data', function(data) {\n    console.log(data);\n  });\n});\nreq.end();\n\n\nvar http = require('http');\nvar path = process.argv[2];\nvar options = {\n  host: 'localhost',\n  port: 80,\n  path: path\n};\nvar req = http.request(options, function(res) {\n  res.on('data', function(data) {\n    console.log(data);\n  });\n});\nreq.end();",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var fs = require('fs');\nvar path = '..\\\\..\\\\etc\\\\passwd';\nfs.readFile(path, function(err, data) {\n    console.log(data);\n});\n\n\nvar fs = require('fs');\nvar path = process.argv[2];\nfs.readFile(path, function(err, data) {\n    console.log(data);\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs');\nconst file = fs.readFileSync('C:\\Users\\User\\Documents\\secret.txt', 'utf8');\nconsole.log(file);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "function vulnerableFunction(path) {\n  var fs = require('fs');\n  fs.readFileSync(path, 'utf8');\n}\n\n\nvar filePath = '/etc/passwd';\nvar result = vulnerableFunction(filePath);\nconsole.log(result);",
    "label": 0,
    "gadgets": []
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const userInput = req.query.filename; const sanitizedPath = path.normalize(userInput); const filePath = path.join(__dirname, sanitizedPath); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } console.log(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedPath)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const allowedFiles = ['file1.txt', 'file2.txt', 'file3.txt']; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access Denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname + '/uploads ', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname + '/uploads ', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const userInput = req.query.filename; const sanitizedPath = path.normalize(userInput); const filePath = path.join(__dirname, sanitizedPath); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } console.log(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedPath)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const allowedFiles = ['file1.txt', 'file2.txt', 'file3.txt']; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access Denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const filePath = path.join(__dirname, req.query.file); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal_with_user_input",
        "source": "path.join(__dirname, req.query.file)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; if (fileName.includes('..')) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access Denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const sanitizedFileName = path.basename(req.query.file); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); if (filePath.includes('..')) { res.status(403).send('Access Denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(400).send('Invalid file name'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, 'uploads', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, 'uploads', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const allowedFiles = ['file1.txt', 'file2.txt', 'file3.txt']; const filePath = path.join(__dirname, fileName); if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, 'public', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, 'public', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const userFileName = req.query.file; const filePath = path.join(__dirname, userFileName); if (filePath.includes('..')) { res.status(400).send('Access Denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, userFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const sanitizedFileName = path.basename(req.query.file); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const allowedFiles = ['file1.txt', 'file2.txt']; const filePath = path.join(__dirname, fileName); if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, 'secure_dir', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'secure_dir', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const userInput = req.query.file; const filePath = path.join(__dirname, '..', userInput); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', userInput)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.body.file; const sanitizedPath = path.normalize(fileName); const filePath = path.join(__dirname, sanitizedPath); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedPath)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['file1.txt', 'file2.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const sanitizedFileName = path.basename(fileName); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['config.json', 'data.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.body.filename; const sanitizedFileName = path.basename(fileName); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, '..', fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, 'public', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'public', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); if (filePath.includes('..')) { res.status(400).send('Access denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const allowedFiles = ['readme.txt', 'config.json']; const filePath = path.join(__dirname, fileName); if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, 'secure_dir', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'secure_dir', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const sanitizedFileName = path.basename(fileName); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['config.json', 'logs.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const sanitizedFileName = path.basename(fileName); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['file1.txt', 'file2.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, fileName); if (filePath.includes('..')) { res.status(400).send('Invalid file path'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['config.json', 'data.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const sanitizedFileName = path.basename(fileName); const filePath = path.join(__dirname, sanitizedFileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, sanitizedFileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.join(__dirname, '..', fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('File not found'); return; } res.send(data); });",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, '..', fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const allowedFiles = ['config.json', 'logs.txt']; const fileName = req.query.file; if (!allowedFiles.includes(fileName)) { res.status(400).send('Invalid file name'); return; } const filePath = path.join(__dirname, fileName); fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "const fs = require('fs'); const path = require('path'); const fileName = req.query.file; const filePath = path.resolve(__dirname, fileName); if (!filePath.startsWith(__dirname)) { res.status(403).send('Access denied'); return; } fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file'); return; } res.send(data); });",
    "label": 0,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(__dirname, fileName)",
        "line_number": 1
      }
    ]
  },
  {
    "code": "var static = require('@nubosoftware/node-static');\nvar file = new static.Server('./public');\nrequire('http').createServer(function (request, response) {\n        file.serve(request, response);\n    }).resume();\n}).listen(3000);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const decodedReqPath = decodeURIComponent(req.path);\n        if (imageParamsString !== '') {\n            const imageParamHash = this.md5(imageParamsString);\n            return path.join(this.cacheDir, this.addSuffix(decodedReqPath, imageParamHash, imageFormat));\n        } else {\n            return decodedReqPath;\n        }",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(this.cacheDir, this.addSuffix(decodedReqPath, imageParamHash, imageFormat)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "router.post(\n  \"/clean_sync_dir\",\n  error_catcher(async (req, res) => {\n    const { dir_name } = req.body; // [1] source\n    try {\n      const rootFolder = await File.rootFolder();\n      const syncDir = path.join(\n        rootFolder.location,\n        \"mobile_app\",\n        \"sync\",\n        dir_name // [2]\n      );\n      await fs.rm(syncDir, { recursive: true, force: true }); // [3] sink\n      res.status(200).send(\"\");\n    } catch (error) {\n      getState().log(2, `POST /sync/clean_sync_dir: '${error.message}'`);\n      res.status(400).json({ error: error.message || error });\n    }\n  })\n);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(\n        rootFolder.location,\n        \"mobile_app\",\n        \"sync\",\n        dir_name // [2]\n      )",
        "line_number": 7
      }
    ]
  },
  {
    "code": "router.get(\n  \"/auto-backup-download/:filename\",\n  isAdmin,\n  error_catcher(async (req, res) => {\n    const { filename } = req.params; \n    [...]\n    if (\n      !isRoot ||\n      !(filename.startsWith(backup_file_prefix) && filename.endsWith(\".zip\"))) {\n      res.redirect(\"/admin/backup\");\n      return;\n    }\n    const auto_backup_directory = getState().getConfig(\"auto_backup_directory\");\n    res.download(path.join(auto_backup_directory, filename), filename); \n  })\n);",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(auto_backup_directory, filename)",
        "line_number": 14
      }
    ]
  },
  {
    "code": "const upserted: AppSchema.Character = {\n    _id: body._id || `temp-${v4().slice(0, 8)}`,\n    kind: 'character',\n    createdAt: now(),",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "  const messages = await read(`messages-${params.id}.json`)",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\n\nconst app = express();\n\n// Set the destination for storing uploaded files\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname);\n  }\n});\n\n// Create an instance of the multer middleware with the storage configuration\nconst upload = multer({ storage: storage });\n\n// Serve the HTML file upload form\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'upload.html'));\n});\n\napp.post('/upload', upload.single('image'), function (req, res) {\n  // Save the uploaded image to the 'uploads' directory\n  const image = req.file;\n  const decodedFilename = decodeURIComponent(image.originalname);\n  const imagePath = path.join(__dirname, 'uploads', decodedFilename);\n\n  fs.copyFile(image.path, imagePath, function (err) {\n    if (err) {\n      return res.status(500).send(err);\n    }                                                                                       res.send('Image uploaded successfully. View image at <a href=\"http://127.0.0.1:3000/uploads/' + decodedFilename + '\">here</a>');\n  });\n});\n\n// Serve the uploaded file\napp.get('/uploads/:filename', function (req, res) {\n  const filename = req.params.filename;\n  const filePath = path.join(__dirname, 'uploads', filename);\n  res.sendFile(filePath);\n});\n\n// Start the server\napp.listen(3000, function () {\n  console.log('Server is running on http://localhost:3000');\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'upload.html')",
        "line_number": 23
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'uploads', decodedFilename)",
        "line_number": 30
      },
      {
        "type": "path_traversal",
        "source": "path.join(__dirname, 'uploads', filename)",
        "line_number": 42
      }
    ]
  },
  {
    "code": "export async function entityUpload(kind: string, id: string, attachment?: Attachment) {\n  if (!attachment) return\n  const filename = `${kind}-${id}`\n  return upload(attachment, filename)\n}",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "var isDirectory = vars.uncompressedSize === 0 && /[\\/\\\\]$/.test(entry.path);\n// protect against malicious zip files which want to extract to parent dirs\nentry.path = entry.path.replace(/^([/\\\\]*[.]+[/\\\\]+)*[/\\\\]*/, \"\");\nentry.type = isDirectory ? 'Directory' : 'File';\nentry.isDirectory = isDirectory;",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const express = require('express');\nconst moment = require('moment');\n\nconst app = express();\nconst port = 1337;\n\napp.get('/time', (req, res) => {\n    const locale = req.query.locale || 'en'; \n\n    // CVE-2022-24785 triggers at the following line in locate() function\n    // locale() function passes the first parameter to require() without any sanitisation, this makes it easier to perform a path traversal attack\n    const currentTime = moment().locale(locale).format('LLLL');\n\n    res.send(`Current time (${locale}): ${currentTime}`);\n});\n\napp.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n});",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const modulePath = normalize(join(path, module.path));",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "function validPath(rootPath, file) {\n  var resolvedPath = path.resolve(rootPath, file);\n\n  return resolvedPath.indexOf(rootPath) === 0;\n}",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(rootPath, file)",
        "line_number": 2
      }
    ]
  },
  {
    "code": "function getFilenameFromUrl(context, publicPath, outputPath, url) {\n  const filename = outputPath + url.substr(publicPath.length);\n  return filename;\n}",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "import { Hono } from 'https://deno.land/x/hono@v4.2.6/mod.ts'\nimport { serveStatic } from 'https://deno.land/x/hono@v4.2.6/middleware.ts'\n\nconst app = new Hono()\napp.use('/static/*', serveStatic({ root: './' }))\n\nDeno.serve(app.fetch)",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "async getTextAssetContent(filepath: string, limit = 300) {\n      try {\n        const content = await fsp.readFile(filepath, 'utf-8')\n        return content.slice(0, limit)\n      }\n      catch (e) {\n        console.error(e)\n        return undefined\n      }",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "get url() {\n    return `http://${this[incomingKey].headers.host}${this[incomingKey].url}`\n  }",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const imageId = dateString + \".\" + slugify(validData.url) +configToString(params);",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "const fs = require('node:fs');\nconst path = require('node:path');\n\nconst userProvidedPath = '../secret.txt';\nconst sanitizedPath = path.resolve(userProvidedPath);\n\nconst nonBufferUint8Array = new Uint8Array(Buffer.from(sanitizedPath));\n\nfs.readFile(nonBufferUint8Array, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data.toString());\n  }\n});",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.resolve(userProvidedPath)",
        "line_number": 5
      }
    ]
  },
  {
    "code": "(function() {\n    var http = require('http');\n    var colors = require('colors');\n    var content;\n    var url = 'http://localhost:9000/../../confidential.txt';\n\n    console.log('\\t[' + 'directory traversal attack'.green + ']: ' + url);\n\n    var content = '';\n\n    http.get(url, (res) => {\n        res.on('data', (chunk) => {\n            content += chunk.toString('utf-8');\n        });\n        res.on('end', () => {\n            console.log('\\t[' + 'directory traversal request response'.green + ']: ' + content.toString('utf-8').red);\n        });\n    });\n})();",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "        if (fs.existsSync(this.pluginsDir + name)) {\n            log.info(\"plugin\", \"Plugin folder already exists? Removing...\");\n            fs.rmSync(this.pluginsDir + name, {\n                recursive: true\n            });\n        }",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "  get url() {\n    return `http://${this[incomingKey].headers.host}${this[incomingKey].url}`\n  },",
    "label": 1,
    "gadgets": []
  },
  {
    "code": "getFilenameFromUrl(url) {\n  const publicPath = ...;\n  const filePath = url.replace(publicPath, '');\n  return path.join(outputPath, filePath);\n}",
    "label": 1,
    "gadgets": [
      {
        "type": "path_traversal",
        "source": "path.join(outputPath, filePath)",
        "line_number": 4
      }
    ]
  },
  {
    "code": "const targetPath = resolvePath(base, path);\n\nif (!isChildPath(resolveRealPath(base), resolveRealPath(targetPath))) {\n  throw new NotAllowedError(\n    'Relative path is not allowed to refer to a directory outside its parent',\n  );\n}",
    "label": 1,
    "gadgets": []
  }
]